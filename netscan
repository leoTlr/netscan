#!/usr/bin/python

import logging
from time import sleep
from sys import exit

# need to be run before main
from ressources.argparse_setup import setup_argparse
from ressources.logging_setup import setup_logging

# for input validation before main
from ressources.helper_funcs import check_privileges, is_valid_cidr, is_valid_dd_netmask, is_valid_portnr

# needed in main
from ressources.helper_funcs import calc_addr_range, print_sorted
from ressources.thread_classes import listenerThread, udpSenderThread
from ressources.xml_funcs import save_xml, compare_xml


def main(address, dd_netmask=None):

    # calculate first and last address of given IPv4-network
    if not dd_netmask: # cidr-notation
        network_addr, broadcast_addr, subnet = calc_addr_range(address)
    else: # non-cidr-notation
        network_addr, broadcast_addr, subnet = calc_addr_range(address, dd_netmask)

    # create listener thread
    listener_thread = listenerThread()
    if args.quiet:
        listener_thread.quiet = True
    if args.sort:
        listener_thread.sort = True

    listener_thread.start()

    # create sender thread
    sender_thread = udpSenderThread(network_addr, broadcast_addr)
    if args.port:
        sender_thread.closed_port = args.port
    if args.quiet:
        sender_thread.quiet = True

    sender_thread.start()
    sender_thread.join(timeout=5) # wait for sender thread to complete

    # wait for late responses
    if args.wait: sleep(args.wait)
    else: sleep(2)

    listener_thread.stop(abnormal=False)
    listener_thread.join(timeout=5) # wait for listener to finish

    netw_addr_str = sender_thread.bin2DottedDecimal(network_addr)
    cidr_nw_str = '{}/{}'.format(netw_addr_str, subnet)

    # collect data from listener
    packet_data = listener_thread.packet_info

    if args.save or args.save_file or args.compare:
        if args.save:
            save_xml(packet_data, cidr_nw_str)
        elif args.save_file:
            save_xml(packet_data, cidr_nw_str, path=args.save_file)

    if not listener_thread.stoppedAbnormally() or not sender_thread.stoppedAbnormally():
        if args.sort:
            print_sorted(packet_data)
        if args.compare:
            nr_changes = compare_xml(packet_data, cidr_nw_str, args.compare)
            if args.quiet:
                # only output if --quiet
                print(nr_changes)
            exit(0)
        else:
            logging.info('{} hosts up in {}'.format(listener_thread.counted_hosts, cidr_nw_str))
            if args.quiet:
                # only output if --quiet
                print(listener_thread.counted_hosts)
            exit(0)
    else:
        logging.error('scan failed')
        exit(-1)


if __name__ == '__main__':
    # verify commandline args, setup logging and run main

    args = setup_argparse()

    # adapt loglevel to user input
    if args.quiet:
        log_level = logging.ERROR
    else:
        log_level = logging.INFO
    setup_logging(log_level)

    if args.port:
        if is_valid_portnr(args.port):
            pass
        else:
            logging.error('illegal port')
            exit(-1)

    if check_privileges():
        pass
    else:
        logging.error('could not create socket. exiting')
        exit(-1)

    if is_valid_cidr(args.ip_address):
        main(args.ip_address)
    elif is_valid_dd_netmask(args.ip_address, args.netmask):
        main(args.ip_address, args.netmask)
        
