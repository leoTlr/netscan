#!/usr/bin/python

import argparse
import threading
import socket # test for root
from re import fullmatch # address validation
import time # wait for late responses

from ressources.thread_classes import listenerThread, udpSenderThread

from traceback import format_exc # debug

desc = """
Host discovery tool.
Will list and count all responding devices in given network by sending an \
UDP-packet to each address and waiting for ICMP: Port unreachable responses. """

parser = argparse.ArgumentParser(description=desc)

parser.add_argument('ip_address', metavar='IPv4-address', help='IPv4 Address in CIDR-notation')
parser.add_argument('-nm', '--netmask', help='netmask in dotted decimal notation \
                    (only needed if ip_address not in CIDR-notation)', metavar='NM')
parser.add_argument('-w', '--wait', help='define time (seconds) to wait for responses \
                     after all packets are sent. Default 2', type=int, metavar='SEC')
parser.add_argument('-p', '--port', help='define a closed UDP port to use. Default 65333',
                    type=int)
parser.add_argument('-s', '--silent', action='store_true',
                    help='only output number of discovered hosts')

args = parser.parse_args()


def main(address, dd_netmask=None):
    # calculate first and last address of given IPv4-network
    if not dd_netmask: # cidr-notation
        network_addr, broadcast_addr, subnet = calc_addr_range(address)
    else: # non-cidr-notation
        network_addr, broadcast_addr, subnet = calc_addr_range(address, dd_netmask)

    scan_ok = True # gets false if sth goes wrong

    # create listener thread
    listener_thread = listenerThread()
    if args.silent:
        listener_thread.silent = True

    listener_thread.start()

    # create sender thread
    sender_thread = udpSenderThread(network_addr, broadcast_addr)
    if args.port:
        sender_thread.closed_port = args.port
    if args.silent:
        sender_thread.silent = True

    sender_thread.start()

    # start sending as soon as listener thread is ready
    while not listener_thread.is_listening:
        if listener_thread.stopped():
            scan_ok = False
            break
        else:
            time.sleep(0.005)
    sender_thread.start_event.set()

    if sender_thread.stopped():
        scan_ok = False

    sender_thread.join(timeout=5) # wait for sender thread to complete

    # wait for late responses
    if args.wait:
        time.sleep(args.wait)
    else:
        time.sleep(2)

    listener_thread.stop()
    listener_thread.join(timeout=5) # wait for listener to finish

    try:
        listener_thread.stop()
        sender_thread.stop()
    except:
        if not args.silent:
            print('[WARNING] could not stop listener and/or sender thread')

    if args.silent:
        if scan_ok:
            print('{}'.format(listener_thread.hostup_counter))
            return listener_thread.hostup_counter
        else:
            return -1
    else:
        if scan_ok:
            netw_addr_str = sender_thread.bin2DottedDecimal(network_addr)
            print('Scan completed. {} hosts up in {}/{}'.format(
                    listener_thread.hostup_counter, netw_addr_str, subnet))
            return listener_thread.hostup_counter
        else:
            print('Scan failed')
            return -1

def calc_addr_range(address, dd_netmask=None):
    # calculate network address and broadcast Address
    # out of given ip address string
    # input either CIDR-type address or dotted decimal and separate netmask

    # separate decimal str blocks into 4 ints
    if not dd_netmask:
        # if CIDR-type, also get subnet (i.e '24' for '.../24')
        dd_addr, subnet_str = address.split('/')
        addr_blocks = [int(block) for block in dd_addr.split('.')]
    else:
        addr_blocks = [int(block) for block in address.split('.')]

    # concatenate decimal blocks to address
    bin_addr = 0b0
    addr_blocks = zip((24, 16, 8, 0), addr_blocks)
    for lshift_val, block in addr_blocks:
        bin_addr += (block << lshift_val)

    if not dd_netmask:
        subnet = int(subnet_str)

        # eqal to ('1'*subnet)+('0'*(32-subnet)) as int
        # i.e 0b11111111111111111111111100000000 for /24
        bin_netm = (2**(32-(32-subnet))-1) << (32-subnet)

    else:
        netm_blocks = [int(block) for block in dd_netmask.split('.')]

        # concatenate decimal blocks to address
        bin_netm = 0b0
        netm_blocks = zip((24, 16, 8, 0), netm_blocks)
        for lshift_val, block in netm_blocks:
            bin_netm += (block << lshift_val)

        # i.e for /24: subnet=24
        subnet = 32-((((2**32)-1)-bin_netm).bit_length())

    network_addr = bin_addr&bin_netm
    broadcast_addr = network_addr+(2**(32-subnet)-1)

    return (network_addr, broadcast_addr, subnet)

def is_valid_cidr(address):
    try:
        split = address.split('/')
        if len(split)==2:
            hostpart = split[0]
            split_hostpart = hostpart.split('.')
            subnet = int(split[1])
            if not 0<subnet<=32:
                return False
            elif not len(split_hostpart)==4:
                return False
            elif not all([0<=int(nr)<=255 for nr in split_hostpart]):
                return False
            else:
                return True
        else:
            return False
    except:
        return False

def is_valid_dd_netmask(address, netmask):
    try:
        addr_split = address.split('.')
        netm_split = netmask.split('.')
        bin_netm = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(*[int(block) for block in netm_split])
        if not len(addr_split)==4:
            return False
        elif not all([0<=int(nr)<=255 for nr in addr_split]):
            return False
        elif not all([0<=int(nr)<=255 for nr in netm_split]):
            return False
        elif not fullmatch('^(1{0,31}0{0,31})$', bin_netm):
            # attention: pattern only checks for bin_netm being ones followed by zeroes
            # BUT also matches len(bin_netm) != 32
            # -> need to explicitly check len
            print('fullmatch failed', bin_netm)
            return False
        elif not len(bin_netm)==32:
            return False
        else:
            return True
    except:
        return False


if args.ip_address:
    run = True
    if args.port and not 1 <= args.port <= 65535:
        print('[ERROR] invalid port. exiting')
        run = False
    try:
        # if this fails, dont run main
        test_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0003))
    except PermissionError:
        run = False
        print('root needed')
    except:
        run = False
        print('[ERROR] could not create socket. exiting')
    finally:
        try:
            test_socket.close()
        except:
            pass
    if run:
        if is_valid_cidr(args.ip_address):
            main(args.ip_address)
        elif is_valid_dd_netmask(args.ip_address, args.netmask):
            main(args.ip_address, args.netmask)
        else:
            print('[ERROR] input address and/or netmask not valid. exiting')
else:
    print('No address given.')
